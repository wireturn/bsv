import "util.scrypt";

/**
 * AdvancedTokenSale
 *
 * Demonstrates atomic swapping of tokens for satoshis: sales made to a buyer's (public key)
 * Uses TxAdvanced, with external funding (additional input) and a change output
 *
 * Use with: getFundedtxPreimage() and unlockFundedScriptTx()
 */
contract AdvancedTokenSale {
    // satoshis / token
    int price;

    constructor(int price) {
        this.price = price;
    }

    public function buy(SigHashPreimage txPreimage, Ripemd160 changePKH, int changeSats, bytes buyer, int numTokens) {
        SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
        // this ensures the preimage is for the current tx
        require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

        // we're using only one byte for the number of tokens purchased
        require(0 < numTokens && numTokens < 128);

        bytes scriptCode = Util.scriptCode(txPreimage);
        int scriptLen = len(scriptCode);

        int oldBalance = Util.value(txPreimage);
        int newBalance = oldBalance + numTokens * this.price;

        // data after the OP_RETURN is a growing list of sales entries:
        //     PubKeyA,numTokensPurchased
        //     PubKeyB,numTokensPurchased
        bytes newSalesEntry = buyer + num2bin(numTokens, Util.DataLen);

        // expect the latest sales entry to be appended to the previous script/state

        int newStateLen = len(newSalesEntry);
        bytes scriptCode_ = scriptCode + num2bin(newStateLen, Util.DataLen) + newSalesEntry;

        // output: amount + scriptlen + script
        bytes counterOutput = Util.buildOutput(scriptCode_, newBalance);

        // Expect the additional CHANGE output
        bytes changeScript = Util.buildPublicKeyHashScript(changePKH);
        // output: amount + scriptlen + script
        bytes changeOutput = Util.buildOutput(changeScript, changeSats);

        // expect exactly two outputs
        Sha256 hashOutputs = hash256(counterOutput + changeOutput);

        // ensure output matches what we expect:
        //     - amount/balance reflects funds received from sale
        //     - output script is the same as scriptCode, with additional sales entry
        //     - expected change output script is there
        require(hashOutputs == Util.hashOutputs(txPreimage));
    }
}
